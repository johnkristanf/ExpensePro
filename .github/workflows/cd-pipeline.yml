name: Laravel CI/CD with Docker and NGINX

on:
  push:
    branches: [main]

env:
  SERVER_DIR: /home/${{ secrets.EC2_USER }}/server
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t johnkristan/expensepro:latest ./server \
            -f ./server/Dockerfile

      - name: üîê Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker Image to Docker Hub
        run: |
          docker push johnkristan/expensepro:latest

      - name: Create .env File for Docker Compose Environment
        run: |
          cat <<'EOF' > .env
          APP_NAME=${{ secrets.APP_NAME }}
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          DB_CONNECTION=${{ secrets.DB_CONNECTION }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}

          LOG_CHANNEL=stack
          LOG_LEVEL=error

          SANCTUM_STATEFUL_DOMAINS=${{ secrets.SANCTUM_STATEFUL_DOMAINS }}
          SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}

          SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}
          SESSION_SAME_SITE=${{ secrets.SESSION_SAME_SITE }}
          SESSION_SECURE_COOKIE=${{ secrets.SESSION_SECURE_COOKIE }}


          USER_FULL_NAME=${{ secrets.USER_FULL_NAME }}
          USER_EMAIL=${{ secrets.USER_EMAIL }}
          USER_PASSWORD=${{ secrets.USER_PASSWORD }}

          EOF

      - name: Make Server Directory on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            mkdir -p ${{ env.SERVER_DIR }}

            
      - name: Upload files using native SCP
        run: |
          # Create temporary SSH key file
          echo "${{ env.EC2_KEY }}" > temp_ssh_key
          chmod 600 temp_ssh_key

          # Upload files directly to target directory
          scp -i temp_ssh_key -o StrictHostKeyChecking=no \
              server/docker-compose.yml \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.SERVER_DIR }}/docker-compose.yml

          scp -i temp_ssh_key -o StrictHostKeyChecking=no \
              server/default.conf \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.SERVER_DIR }}/default.conf

          scp -i temp_ssh_key -o StrictHostKeyChecking=no \
              .env \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.SERVER_DIR }}/.env

          # Clean up
          rm temp_ssh_key

      - name: Upload Environment File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          source: ".env"
          target: ${{ env.SERVER_DIR }}/
          overwrite: true

      - name: Install Docker and Docker Compose inside EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            set -e

            if ! command -v docker &> /dev/null; then
              
              sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
              
              sudo apt-get update
             
              sudo apt-get install -y ca-certificates curl gnupg
              
              sudo install -m 0755 -d /etc/apt/keyrings
              
              # Docker Key for Repository Signing
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
                sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              
              # Docker Official Repository
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              sudo apt-get update
             
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              
              sudo usermod -aG docker $USER
            fi

            # Install Docker Compose plugin if not installed
            if ! docker compose version &> /dev/null; then
              sudo apt-get install -y docker-compose-plugin
            fi

      - name: üöÄ Deploy & Setup SSL Key and Certificate
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            set -e

            # Stop any existing web servers ONLY during certificate issuance
            sudo systemctl stop apache2 || true
            sudo systemctl stop nginx || true
            sudo systemctl disable apache2 || true
            sudo systemctl disable nginx || true
            sudo fuser -k 80/tcp || true
            sudo fuser -k 443/tcp || true

            # Install certbot 
            if ! command -v certbot &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y certbot
            fi

            # One-time SSL issuance (only if certs don't exist yet)
            if [ ! -d "/etc/letsencrypt/live/${{ secrets.SSL_DOMAIN }}" ]; then
              echo "‚ö° Requesting SSL certificate for ${{ secrets.SSL_DOMAIN }}..."
              sudo certbot certonly --standalone \
                -d ${{ secrets.SSL_DOMAIN }} -d www.${{ secrets.SSL_DOMAIN }} \
                --non-interactive --agree-tos -m ${{ secrets.SSL_EMAIL }}
            else
              echo "‚úÖ SSL certificate already exists, skipping issuance."
            fi

            # Enable auto-renew via systemd
            sudo systemctl enable certbot.timer
            sudo systemctl start certbot.timer

            # Create renewal hook to stop containers during renewal
            sudo mkdir -p /etc/letsencrypt/renewal-hooks/pre
            sudo mkdir -p /etc/letsencrypt/renewal-hooks/post

            # Pre-hook: Stop containers before renewal
            cat << 'EOF' | sudo tee /etc/letsencrypt/renewal-hooks/pre/stop-containers.sh

            #!/bin/bash
            cd ${{ env.SERVER_DIR }}
            docker compose down || true

            EOF

            # Post-hook: Start containers after renewal
            cat << 'EOF' | sudo tee /etc/letsencrypt/renewal-hooks/post/start-containers.sh

            #!/bin/bash
            cd ${{ env.SERVER_DIR }}
            docker compose up -d || true
            
            EOF

            sudo chmod +x /etc/letsencrypt/renewal-hooks/pre/stop-containers.sh
            sudo chmod +x /etc/letsencrypt/renewal-hooks/post/start-containers.sh

      - name: üöÄ Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            set -e

            cd ${{ env.SERVER_DIR }}

            echo "üìÑ Checking Files inside EC2"
            ls -lah

            echo "üìÑ Viewing .env"
            cat .env

            echo "üîê Logging into Docker Hub..."
            echo "${{ env.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin

            echo "Stopping old containers..."
            docker compose down || true

            echo "Pulling latest images..."
            docker compose pull

            echo "Starting containers..."
            docker compose up -d --remove-orphans

            echo "Checking container status..."
            docker compose ps

            echo "Recent logs:"
            docker compose logs --tail=50
